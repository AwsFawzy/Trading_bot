"""
ููู ูุงุฌูุฉ ูุฑุจุท ุขููุฉ ููุน ุชูุฑุงุฑ ุงูุตููุงุช ูุน ูุธุงู ุงูุชุฏุงูู ุงูุขูู.
ูุชู ุงุณุชุฏุนุงุก ูุฐุง ุงูููู ูู app/auto_trader.py ู app/trade_executor.py
"""

import os
import json
import time
import logging
import subprocess
from typing import Tuple, Set, List, Dict, Any

logger = logging.getLogger(__name__)

# ุงูุนููุงุช ุงูููููุนุฉ ุจุดูู ุฏุงุฆู
BANNED_SYMBOLS = ['XRPUSDT']

def enforce_diversity() -> int:
    """
    ุชูููุฐ ุงูุชูููุน ุงูุฅูุฒุงูู ููุตููุงุช
    
    :return: ุนุฏุฏ ุงูุตููุงุช ุงููุบููุฉ
    """
    try:
        # ูุญุงููุฉ ุชูููุฐ ุงูุณูุฑูุจุช ุงูุฎุงุฑุฌู
        result = subprocess.run(['python', 'run_before_trade.py'], 
                               capture_output=True, text=True)
        logger.info(f"ุชู ุชูููุฐ ุณูุฑูุจุช ุงูุชูููุน: {result.stdout}")
        
        # ุงุณุชุฎุฑุงุฌ ุนุฏุฏ ุงูุตููุงุช ุงููุบููุฉ ูู ุงููุชูุฌุฉ
        import re
        match = re.search(r'ุชู ุฅุบูุงู (\d+) ุตููุฉ ููุฑุฑุฉ', result.stdout)
        if match:
            return int(match.group(1))
        
        return 0
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชูููุฐ ุงูุชูููุน: {e}")
        
        # ูุญุงููุฉ ุงูุชูููุฐ ุงูุฏุงุฎูู ููุชูููุน
        return _internal_enforce_diversity()

def _internal_enforce_diversity() -> int:
    """
    ุชูููุฐ ุงูุชูููุน ุฏุงุฎููุงู ุฅุฐุง ูุดู ุงูุณูุฑูุจุช ุงูุฎุงุฑุฌู
    
    :return: ุนุฏุฏ ุงูุตููุงุช ุงููุบููุฉ
    """
    try:
        # ุชุญููู ุงูุตููุงุช
        trades_data = _load_trades()
        
        # ุชุทุจูู ููุงุนุฏ ุงูุชูููุน
        return _apply_diversity_rules(trades_data)
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุงูุชูููุฐ ุงูุฏุงุฎูู ููุชูููุน: {e}")
        return 0

def _load_trades() -> Dict[str, List[Dict[str, Any]]]:
    """
    ุชุญููู ุงูุตููุงุช ูู ุงูููู
    
    :return: ุจูุงูุงุช ุงูุตููุงุช
    """
    try:
        if os.path.exists('active_trades.json'):
            with open('active_trades.json', 'r') as f:
                data = json.load(f)
                if isinstance(data, dict) and 'open' in data and 'closed' in data:
                    return data
                # ุชุญููู ุงูุชูุณูู ุงููุฏูู (ูุงุฆูุฉ) ุฅูู ุงูุชูุณูู ุงูุฌุฏูุฏ (ูุงููุณ)
                return {
                    'open': [t for t in data if t.get('status') == 'OPEN'],
                    'closed': [t for t in data if t.get('status') != 'OPEN']
                }
        return {'open': [], 'closed': []}
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชุญููู ุงูุตููุงุช: {e}")
        return {'open': [], 'closed': []}
        
def _save_trades(trades_data: Dict[str, List[Dict[str, Any]]]) -> bool:
    """
    ุญูุธ ุงูุตููุงุช ูู ุงูููู
    
    :param trades_data: ุจูุงูุงุช ุงูุตููุงุช
    :return: ูุฌุงุญ ุงูุนูููุฉ
    """
    try:
        # ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ
        backup_name = f"active_trades.json.backup.{int(time.time())}"
        os.system(f"cp active_trades.json {backup_name}")
        
        # ุญูุธ ุงูุจูุงูุงุช
        with open('active_trades.json', 'w') as f:
            json.dump(trades_data, f, indent=2)
            
        return True
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุญูุธ ุงูุตููุงุช: {e}")
        return False

def _apply_diversity_rules(trades_data: Dict[str, List[Dict[str, Any]]]) -> int:
    """
    ุชุทุจูู ููุงุนุฏ ุงูุชูููุน ุนูู ุงูุตููุงุช
    
    :param trades_data: ุจูุงูุงุช ุงูุตููุงุช
    :return: ุนุฏุฏ ุงูุตููุงุช ุงููุบููุฉ
    """
    open_trades = trades_data.get('open', [])
    closed_trades = trades_data.get('closed', [])
    
    # ูููุนุงูุฌุฉ
    processed_symbols = set()
    filtered_trades = []
    trades_to_close = []
    
    # ูุฑุฒ ุงูุตููุงุช ุญุณุจ ุงูุชุงุฑูุฎ (ุงูุฃุญุฏุซ ุฃููุงู)
    open_trades.sort(key=lambda x: x.get('enter_time', 0), reverse=True)
    
    for trade in open_trades:
        symbol = trade.get('symbol', '').upper()
        if not symbol:
            filtered_trades.append(trade)
            continue
            
        # ููุน ุงูุนููุงุช ุงููุญุธูุฑุฉ
        if symbol in BANNED_SYMBOLS:
            trade['status'] = 'closed'
            trade['exit_time'] = int(time.time() * 1000)
            trade['exit_reason'] = 'banned_symbol'
            trade['enforced_close'] = True
            trades_to_close.append(trade)
            logger.warning(f"๐ซ ุฅุบูุงู ุตููุฉ ุนูู ุนููุฉ ูุญุธูุฑุฉ: {symbol}")
            continue
            
        # ุฅุฐุง ูุงูุช ุงูุนููุฉ ูู ุชุชู ูุนุงูุฌุชูุง
        if symbol not in processed_symbols:
            processed_symbols.add(symbol)
            filtered_trades.append(trade)
        # ุฅุฐุง ูุงูุช ุงูุนููุฉ ูุฏ ุชูุช ูุนุงูุฌุชูุง
        else:
            trade['status'] = 'closed'
            trade['exit_time'] = int(time.time() * 1000)
            trade['exit_reason'] = 'enforce_diversity'
            trade['enforced_close'] = True
            trades_to_close.append(trade)
            logger.warning(f"๐ ุฅุบูุงู ุตููุฉ ููุฑุฑุฉ: {symbol}")
    
    # ุชุญุฏูุซ ุงูููุงุฆู
    trades_data['open'] = filtered_trades
    trades_data['closed'].extend(trades_to_close)
    
    # ุญูุธ ุงูุชุบููุฑุงุช
    _save_trades(trades_data)
    
    return len(trades_to_close)

def get_traded_symbols() -> Set[str]:
    """
    ุงูุญุตูู ุนูู ุงูุนููุงุช ุงููุชุฏุงููุฉ ุญุงููุงู
    
    :return: ูุฌููุนุฉ ูู ุงูุนููุงุช ุงููุชุฏุงููุฉ
    """
    try:
        trades_data = _load_trades()
        open_trades = trades_data.get('open', [])
        
        # ุงุณุชุฎุฑุงุฌ ุงูุนููุงุช
        symbols = set()
        for trade in open_trades:
            symbol = trade.get('symbol', '').upper()
            if symbol:
                symbols.add(symbol)
                
        # ุฅุถุงูุฉ ุงูุนููุงุช ุงููุญุธูุฑุฉ
        for symbol in BANNED_SYMBOLS:
            symbols.add(symbol)
            
        return symbols
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุนููุงุช ุงููุชุฏุงููุฉ: {e}")
        return set()

def is_symbol_allowed(symbol: str) -> Tuple[bool, str]:
    """
    ุงูุชุญูู ูุง ุฅุฐุง ูุงู ูุณููุญุงู ุจุชุฏุงูู ุนููุฉ ูุนููุฉ
    
    :param symbol: ุฑูุฒ ุงูุนููุฉ
    :return: (ูุณููุญุ ุงูุณุจุจ)
    """
    if not symbol:
        return False, "ุงูุฑูุฒ ุบูุฑ ูุญุฏุฏ"
        
    # ููุน ุงูุนููุงุช ุงููุญุธูุฑุฉ
    if symbol.upper() in BANNED_SYMBOLS:
        return False, f"ุงูุนููุฉ {symbol} ูุญุธูุฑุฉ"
        
    # ุชูููุฐ ุงูุชูููุน ุฃููุงู
    enforce_diversity()
    
    # ุงูุญุตูู ุนูู ุงูุนููุงุช ุงููุชุฏุงููุฉ
    traded_symbols = get_traded_symbols()
    
    # ุงูุชุญูู ูู ุงูุชุฏุงูู
    if symbol.upper() in traded_symbols:
        return False, f"ุงูุนููุฉ {symbol} ููุฏ ุงูุชุฏุงูู ุจุงููุนู"
        
    return True, "ูุณููุญ ุจุงูุชุฏุงูู"

def is_trade_allowed(symbol: str) -> bool:
    """
    ููุชูุงูู ูุน ุงููุงุฌูุฉ ุงููุฏููุฉ - ุงูุชุญูู ูุง ุฅุฐุง ูุงู ูุณููุญุงู ุจุชุฏุงูู ุนููุฉ ูุนููุฉ
    
    :param symbol: ุฑูุฒ ุงูุนููุฉ
    :return: ูุณููุญ ุจุงูุชุฏุงูู
    """
    if not symbol:
        return False
        
    # ุฅุถุงูุฉ ุงูุตูุงุจุฉ ููุชุนุงูู ูุน ุงูุฃููุงุน ุบูุฑ ุงููุชููุนุฉ
    try:
        symbol_str = str(symbol).upper()
    except:
        return False
        
    allowed, _ = is_symbol_allowed(symbol_str)
    return allowed